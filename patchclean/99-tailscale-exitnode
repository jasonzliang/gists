#!/bin/ash
# Tailscale Exit Node Auto-Configuration Script
#
# This script automatically configures and monitors a Tailscale exit node on OpenWrt.
# Features:
# - Auto-installs itself to /etc/uci-defaults/ for persistence across upgrades
# - Interactive subnet route configuration with sensible defaults
# - Sets up hourly monitoring via cron to ensure exit node stays enabled
# - Configures boot-time execution to handle reboots
# - Manages Tailscale service startup and connection verification
#
# Usage:
#   ./script.sh           # Full interactive setup (default)
#   ./script.sh install   # Force installation only
#   ./script.sh check     # Check/enable exit node status
#   ./script.sh routes    # Show current route configuration
#   ./script.sh reconfigure # Reconfigure advertised routes
#
# The script preserves itself during sysupgrade and runs automatically after
# installation to maintain exit node functionality without manual intervention.

SCRIPT_NAME="99-tailscale-exitnode"
TARGET_PATH="/etc/uci-defaults/$SCRIPT_NAME"
ROUTES_FILE="/etc/tailscale-custom-routes"
DEFAULT_ROUTES="0.0.0.0/0,::/0"

# Logging helper
log() { logger -t tailscale_exitnode "$1"; }

# File operations helper
ensure_file() {
    local file="$1" content="$2" mode="$3"
    # More atomic file creation
    if [ ! -f "$file" ]; then
        local temp_file="${file}.tmp.$"
        if printf "$content" > "$temp_file" && mv "$temp_file" "$file"; then
            [ "$mode" ] && chmod "$mode" "$file"
        else
            rm -f "$temp_file"
            return 1
        fi
    fi
}

# Service management helper
manage_service() {
    local service="$1" action="$2"
    [ -x "/etc/init.d/$service" ] && "/etc/init.d/$service" "$action" 2>/dev/null
}

# Check if service is running
is_running() {
    case "$1" in
        cron) pgrep -x crond >/dev/null || pgrep -x cron >/dev/null ;;
        *) pgrep "$1" >/dev/null ;;
    esac
}

# Setup alias in .ashrc
setup_alias() {
    local ashrc="/root/.ashrc"
    local alias_line="alias exitnode=\"$TARGET_PATH check\""

    if [ ! -f "$ashrc" ] || ! grep -qF "alias exitnode=" "$ashrc"; then
        echo "$alias_line" >> "$ashrc"
        log "Added exitnode alias to $ashrc"
    fi
}

# Self-install if not in target location
self_install() {
    [ "$0" = "$TARGET_PATH" ] && return 0

    mkdir -p "$(dirname "$TARGET_PATH")"

    # Check if target already exists and warn about overwrite
    if [ -f "$TARGET_PATH" ]; then
        log "Overwriting existing script at $TARGET_PATH"
        echo "⚠ Overwriting existing installation at $TARGET_PATH"
    fi

    if cp "$0" "$TARGET_PATH" && chmod +x "$TARGET_PATH"; then
        log "Script installed to $TARGET_PATH"
        echo "✓ Installed to $TARGET_PATH"
        "$TARGET_PATH" && echo "✓ Setup completed"
        return 0
    else
        log "Installation failed"
        echo "✗ Installation failed"
        return 1
    fi
}

# Interactive route configuration
configure_routes() {
    cat <<'EOF'

=== Tailscale Route Configuration ===
Default routes: 0.0.0.0/0,::/0 (all internet traffic)

Do you want to advertise additional subnet routes? (y/N)
EOF
    printf "Choice: "; read -r choice

    # Clearer logic
    case "${choice:-n}" in
        [Yy]*)
            cat <<'EOF'

Enter additional IP ranges (comma-separated):
Examples: 192.168.1.0/24 or 10.0.0.0/8,172.16.0.0/12

EOF
            printf "Additional routes: "; read -r extra
            echo "${DEFAULT_ROUTES}${extra:+,$extra}" > "$ROUTES_FILE"
            echo "✓ Custom routes saved"
            ;;
        *)
            echo "$DEFAULT_ROUTES" > "$ROUTES_FILE"
            echo "✓ Using default routes only"
            ;;
    esac
}

# Setup cron with service check
setup_cron() {
    # Enable cron service (with error handling)
    if [ -x /etc/init.d/cron ]; then
        manage_service cron enabled || manage_service cron enable
        is_running "cron" || manage_service cron start
    else
        log "Cron service not available"
        return 1
    fi

    # Add cron job if not exists (with safe crontab handling)
    local current_cron temp_cron
    current_cron=$(crontab -l 2>/dev/null || true)

    if ! echo "$current_cron" | grep -qF "$TARGET_PATH check"; then
        # Use /tmp with PID for temp file (more portable than mktemp)
        temp_cron="/tmp/crontab.$"
        {
            echo "$current_cron"
            echo "# Tailscale exit node check"
            echo "0 * * * * $TARGET_PATH check"
        } > "$temp_cron"

        if crontab "$temp_cron"; then
            log "Added hourly cron job"
        else
            log "Failed to update crontab"
            rm -f "$temp_cron"
            return 1
        fi
        rm -f "$temp_cron"
    fi
}

# Setup boot execution
setup_boot() {
    ensure_file /etc/rc.local "#!/bin/sh\n# Put your custom commands here\nexit 0" +x
    grep -qF "$TARGET_PATH" /etc/rc.local || \
        sed -i "\|exit 0|i\\
$TARGET_PATH check &" /etc/rc.local
}

# Setup upgrade preservation
setup_preservation() {
    local conf_file
    if [ -d /etc/sysupgrade.conf.d ]; then
        conf_file="/etc/sysupgrade.conf.d/tailscale-exitnode"
    elif [ -f /etc/sysupgrade.conf ]; then
        conf_file="/etc/sysupgrade.conf"
    fi

    [ "$conf_file" ] && {
        grep -q "^$TARGET_PATH$" "$conf_file" 2>/dev/null || echo "$TARGET_PATH" >> "$conf_file"
    }
}

# Main Tailscale exit node check and configuration
check_tailscale() {
    # Verify Tailscale installation and service
    command -v tailscale >/dev/null || { log "Tailscale not installed"; return 1; }
    command -v jsonfilter >/dev/null || { log "jsonfilter not available"; return 1; }

    if ! is_running tailscaled; then
        log "Starting Tailscale daemon"
        manage_service tailscale start
        sleep 5
    fi

    # Get status and check exit node
    local status exitnode_enabled routes
    status=$(tailscale status --json 2>/dev/null) || { log "Failed to get status"; return 1; }
    exitnode_enabled=$(echo "$status" | jsonfilter -e '$.Self.ExitNodeOption' 2>/dev/null)

    if [ "$exitnode_enabled" != "true" ]; then
        routes=$([ -f "$ROUTES_FILE" ] && cat "$ROUTES_FILE" || echo "$DEFAULT_ROUTES")
        # Validate routes format (basic check - no spaces or invalid chars)
        case "$routes" in
            *[!0-9./,:]*) log "Invalid routes format: $routes"; return 1 ;;
            *\ *) log "Routes cannot contain spaces: $routes"; return 1 ;;
        esac
        log "Enabling exit node with routes: $routes"
        tailscale up --advertise-exit-node --accept-dns=true --accept-routes --advertise-routes="$routes"
        log "Exit node enabled"
    else
        log "Exit node already enabled"
    fi
}

# Main execution
case "${1:-setup}" in
    check)
        check_tailscale ;;
    install)
        self_install ;;
    reconfigure)
        configure_routes
        echo "Routes reconfigured. Run '$0 check' to apply" ;;
    routes)
        echo "Current routes: $([ -f "$ROUTES_FILE" ] && cat "$ROUTES_FILE" || echo "$DEFAULT_ROUTES")" ;;
    setup|*)
        # Auto-install if needed
        if [ "$(basename "$0")" != "$SCRIPT_NAME" ] || [ "$(dirname "$0")" != "/etc/uci-defaults" ]; then
            self_install; exit $?
        fi

        # Full setup
        echo "=== Tailscale Exit Node Setup ==="
        configure_routes
        setup_boot
        setup_cron
        setup_preservation
        setup_alias
        check_tailscale

        # Return 1 to persist script through upgrades
        exit 1 ;;
esac